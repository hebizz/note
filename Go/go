vim /etc/profile

export GOPATH=/home/hebi/go
export PATH=$PATH:/usr/local/go/bin
export GOROOT=/usr/local/go
export PATH="$GOPATH/bin/linux_arm:$PATH"

source /etc/profile


go get -u github.com/gin-gonic/gin #安装gin
gin echo beego


go get -u github.com/kardianos/govendor
govendor init
项目根目录下即会自动生成 vendor 目录和 vendor.json 文件
govendor只是用来管理项目的依赖包，如果GOPATH中本身没有项目的依赖包，则需要通过go get先下载到GOPATH中，再通过govendor add +external拷贝到vendor目录


post:
application/json     （request中发送json数据用post方式发送Content-type用application/json）
application/x-www-form-urlencoded     （最常见的表单数据提交，把query string的内容，放到了body体里，同样也需要urlencode）
application/xml    （HTTP 作为传输协议，XML 作为编码方式的远程调用规范）
multipart/form-data     （常用语附件上传，比如说图片）

curl -X POST httP://localhost:8080/v1/shellcommand -H "application/x-www-form-urlencoded" -d "Module=dlmodule&Method=stop&Object=pin"

curl -X POST httP://localhost:8080/v1/mkdirproject -H "application/x-www-form-urlencoded" -d "projectname=test"

curl -X POST http://localhost:8080/v1/uploadfile -F "file=@/home/admin/main.c"   -H "Content-Type: multipart/form-data"

curl -X GET http://localhost:8080/
v1/compileproject

curl -H "Content-Type: application/json" -X POST  --data '{"name":"sgcc","frame":"tf","version":"v1"}' http://localhost:8000/api/v1/getmsg{"msg":"getmsg succ"}


golang分配内存有一个make函数，该函数第一个参数是类型，第二个参数是分配的空间，第三个参数是预留分配空间，前两个参数都很好理解，但我对第三个参数却一脸懵逼，例如a:=make([]int, 5, 10)， len(a)输出结果是5，cap(a)输出结果是10，然后我对a[4]进行赋值发现是可以得，但对a[5]进行赋值发现报错了，于是郁闷这个预留分配的空间要怎么使用呢，于是google了一下发现原来预留的空间需要重新切片才可以使用


使用break lable 和 goto lable 都能跳出for循环；不同之处在于：break标签只能用于for循环，且标签位于for循环前面，goto是指跳转到指定标签处


export BSP_ROOT=/home/admin/go/src/Mcu-gin/RT_Thread/bsp/stm32/stm32f429-jx-ttu
export RTT_ROOT=/home/admin/go/src/Mcu-gin/RT_Thread
需要在bsp跟目录下执行依赖命令
apt-get install scons gcc-arm-none-eabi

Microsecond = 1000 * Nanosecond   Millisecond = 1000 * Microsecond   Second = 1000 * Millisecond   Minute = 60 * Second   Hour = 60 * Minute   )
time.Sleep(time.Duration(2)*time.Second)


reflect.TypeOf(变量名).String() 查看变量类型

#fmt.Println 和 log包
最初的就是直接打印出来，之后一点点升级，比如加上输出的时间，加上goroutine之间的并发操作(打印信息并不能一定按照你规定好的顺序输出来 每次输出的顺序可能会不同)，按照不同的日志级别进行打印 。。。加上打印以及转存，因此就需要专门的log包来记录程序的信息。
想象一下，一个很大的项目有很多的输出信息，要是输出信息前面没有加上日期的话，debug起来几乎是难以想象的，因为不可能一直盯着屏幕来对信息进行监控。

因此采用log来代替fmt的原因主要有一下几个方面：
1.添加了输出时间
2.线程安全
3.方便对日志信息进行转存，形成日志文件


#使用defer 和 recover来处理错误
 defer func() {
        if err := recover(); err != nil {
            fmt.Println("发送短信，邮件给管理员...", err)
        }


var s *Student = new(Student)
var s1 *Student = &Student{102, "John", "Nanjing Road", 19}
var s2 Student = Student{103, "Smith", "Heping Road", 20}


curl -H "Content-Type: application/json" -X GET  http://10.53.2.217:9004/api/v1/getmodel

curl -X POST http://10.53.2.217:9004/api/v1/upload -F "file=@/home/hebi/testset.zip"   -H "Content-Type: multipart/form-data"

curl -H "Content-Type: application/json" -X POST  --data '{"name":"sgcc","framework":"tf","version":"v1","relatedlabel":"test"}' http://10.53.2.217:9004/api/v1/getmsg

curl -H "Content-Type: application/json" -X POST  --data '{"modelmd5":"128be017a6befa6ba8916df423b27f7a"}' http://10.53.2.217:9004/api/v1/publish

protoc -I helloworld/ helloworld/helloworld.proto --go_out=plugins=grpc:helloworld



json.Unmarshal 将json数据导入结构体中时，结构体不打tag时，将不会区分大小写，打了tag时，只会去匹配对应的tag项




 #Go 语言性能分析
1.比较 Go 和 Python 在简单的 web 服务器方面的性能，单位为传输量每秒：
原生的 Go http 包要比 web.py 快 7 至 8 倍，如果使用 web.go 框架则稍微差点，
比 web.py 快 6 至 7 倍。在 Python 中被广泛使用的 tornado 异步服务器和框架在 web 环境下要比 web.py 快很多，
Go 大概只比它快 1.2 至 1.5 倍

2.Go 和 Python 在一般开发的平均水平测试中，Go要比 Python 3 快 25 倍左右，少占用三分之二的内存，
但比 Python 大概多写一倍的代码

3.
Go 和 Scala 之间具有更多的可比性（都使用更少的代码），而 C++ 和 Java 都使用非常冗长的代码。
Go 的编译速度要比绝大多数语言都要快，比 Java 和 C++ 快 5 至 6 倍，比 Scala 快 10 倍。
Go 的二进制文件体积是最大的（每个可执行文件都包含 runtime）。
在最理想的情况下，Go 能够和 C++ 一样快，比 Scala 快 2 至 3 倍，比 Java 快 5 至 10 倍。
Go 在内存管理方面也可以和 C++ 相媲美，几乎只需要 Scala 所使用的一半，比 Java 少 4 倍左右。



#string到int
int,err:=strconv.Atoi(string)
#string到int64
int64, err := strconv.ParseInt(string, 10, 64)
#int到string
string:=strconv.Itoa(int)
#int64到string
string:=strconv.FormatInt(int64,10)

var a interface{}
var b string
a = "123"
b = a.(string)
可以通过a.(type)来判断a可以转为什么类型。 interface 转换需要.(type)执行，而byte则是string()



#string到int
int,err:=strconv.Atoi(string)
#string到int64
int64, err := strconv.ParseInt(string, 10, 64)
#int到string
string:=strconv.Itoa(int)
#int64到string
string:=strconv.FormatInt(int64,10)


#获取调用函数名，文件，行数, 状态
pc, file, line, ok := runtime.Caller(1)
0是调用runtime的函数,1是调用此函数的上级

#struct 能否比较
指针可以比较，实例的话，需要看它的成员变量是否包含不可比较数据。

可排序、可比较和不可比较
可排序的数据类型有三种，Integer，Floating-point，和String
可比较的数据类型除了上述三种外，还有Boolean，Complex，Pointer，Channel，Interface和Array
不可比较的数据类型包括，Slice, Map, 和Function

struct必须是可比较的，才能作为key，否则编译时报错


#channels详解（select,同步，超时）
https://colobu.com/2016/04/14/Golang-Channels/

#defer 源码解析
https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/

当 channel是nil的时候，无论是传入数据还是取出数据，都会永久的block


#go 等待协程结束的实现方式
1.sync.WaitGroup是等待一组协程结束，
sync.WaitGroup只有3个方法，Add()添加一个计数，Done()减去一个计数，Wait()阻塞直到所有任务完成。(无顺序)
package main

import (
	"fmt"
	"sync"
	"time"
)

var wg sync.WaitGroup //定义一个同步等待的组

func task(i int){
	fmt.Println("task...",i)
	//耗时操作任务，网络请求，读取文件
	time.Sleep(time.Second)
	wg.Done() //减去一个计数
}

func main(){
	for i:= 0;i<10;i++{
		wg.Add(1) //添加一个计数
		go task(i)
	}
	wg.Wait() //阻塞直到所有任务完成
	fmt.Println("over")
}

2.利用缓冲信道channel协程之间通讯，其阻塞等待功能实现等待一组协程结束，不能保证其goroutine按照顺序执行

package main

import (
	"fmt"
)

var ch = make(chan int,10)

func task(i int){
	fmt.Println("task...",i)
	ch <- i
}

func main(){
	for i:= 0;i<10;i++{
		go task(i)
	}
	for i:= 0;i<10;i++{
		<- ch
	} 
	fmt.Println("over")
}

3.利用无缓冲的信道channel协程之间通讯，其阻塞等待功能实现等待一组协程结束，保证了其goroutine按照顺序执行
package main

import (
	"fmt"
	"time"
)

var ch = make(chan int)

func task(i int){
	fmt.Println("task...",i)
	time.Sleep(time.Second)
	 <- ch
}

func main(){
	for i:= 0;i<10;i++{
		go task(i)
		ch <- i
	}
	fmt.Println("over")
}

#go Module 使用
go mod init

go.mod 提供了module, require、replace和exclude 四个命令
module 语句指定包的名字（路径）
require 语句指定的依赖项模块
replace 语句可以替换依赖项模块
exclude 语句可以忽略依赖项模块

go run main.go 自动检查依赖并下载,go.mod中会生成版本信息, go.sum 文件来记录dependency tree

可以使用命令 go list -m -u all 来检查可以升级的package，使用go get -u need-upgrade-package 升级后会将新的依赖版本更新到go.mod
也可以使用 go get -u 升级所有依赖




#[]byte类型在转换成string类型的时候，都会在最后多一行空格


# strings.Replace
func Replace(s, old, new string, n int) string
返回将s中前n个不重叠old子串都替换为new的新字符串，如果n<0会替换所有old子串。


# go build 时 ldflags -X 可以传递版本信息给代码中，需要注意的是变量路径需要从gopath下开始指定

# go交叉编译不支持cgo,需要CGO支持的，要将CGO_ENABLED的0改为1，此外还需要设置编译器
  CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=arm-linux-gnueabi-gcc go build
  sudo apt-get install g++-arm-linux-gnueabi
  sudo apt-get install gcc-arm-linux-gnueabi


#可以把任何类型赋值给interface{}，却不能把任何类型的切片赋值到[]interface{}
[]interface{}类型变量拥有特定的内存结构，这在编译时就已经决定了。
每个interface{}占两个字（word)，一个字用于存放interface存放的类型，另一个字用于存放实际数据或者是指向数据的指针。
于是长度为N的[]interface{}类型切片背后是一个N*2字长的一块数据。
这与一般的[]MyType类型切片不同，相同长度的[]MyType切片背后的数据块大小为N*sizeof(MyType)字长。
正是这两个原因决定了不能直接将某些[]MyType切片赋值给[]interface{}， 他们背后代表的数据意义不同。


#golang高效拼接字符串
Go 语言中，字符串是只读的，也就意味着每次修改操作都会创建一个新的字符串。如果需要拼接多次，应使用 strings.Builder，最小化内存拷贝次数。
var str strings.Builder
for i := 0; i < 1000; i++ {
    str.WriteString("a")
}
fmt.Println(str.String())

结论:
在已有字符串数组的场合，使用 strings.Join() 能有比较好的性能
在一些性能要求较高的场合，尽量使用 buffer.WriteString() 以获得更好的性能
较少字符串连接的场景下性能最好，而且代码更简短清晰，可读性更好
如果需要拼接的不仅仅是字符串，还有数字之类的其他需求的话，可以考虑 fmt.Sprintf


#多个defer遵循先进后出的方式, 在return之后执行, 可以修改return的值, 有名返回可以修改, 无名返回不可以修改
因为无名返回时, golang的返回机制会创建一个临时变量去接受返回值, 而临时变量的值并未修改
defer 延迟调用时，需要保存函数指针和参数，因此链式调用的情况下，除了最后一个函数/方法外的函数/方法都会在调用时直接执行


#golang tag通过反射获取结构体字段和json与bson字段之前的转换关系, 丰富了代码的语义, 更加灵活

#golang 用const来表示枚举

#空struct{}用途
1.可以节省内存, 用作占位符, 比如map只关注key时, 可以将value赋值给空struct
2. 在channel中用作信号处理时
3. 声明只有方法的结构体

#Go 语言的局部变量分配在栈上还是堆上？由编译器决定。Go 语言编译器会自动决定把一个变量放在栈还是放在堆，
编译器会做逃逸分析(escape analysis)，当发现变量的作用域没有超出函数范围，就可以在栈上，反之则必须分配在堆上。
func foo() *int {
	v := 11
	return &v
}
func main() {
	m := foo()
	println(*m) // 11
}
foo() 函数中，如果 v 分配在栈上，foo 函数返回时，&v 就不存在了，但是这段函数是能够正常运行的。
Go 编译器发现 v 的引用脱离了 foo 的作用域，会将其分配在堆上。因此，main 函数中仍能够正常访问该值


#interface{}接口内含两个字段, 类型T和值V, 接口值与非接口值比较时，会先将非接口值尝试转换为接口值，再比较
interface{} 为nil时 , T,V同时为nil
interface{}赋值给其他类型nil值时, interface{}不再==nil


#非接口的任意类型 T() 都能够调用 *T 的方法吗？反过来呢
一个T类型的值可以调用为*T类型声明的方法，但是仅当此T的值是可寻址(addressable) 的情况下。
编译器在调用指针属主方法前，会自动取此T值的地址。因为不是任何T值都是可寻址的，所以并非任何T值都能够调用为类型*T声明的方法。
哪些值是不可寻址的呢？
字符串中的字节；
map 对象中的元素（slice 对象中的元素是可寻址的，slice的底层是数组）；
常量；
包级别的函数等。


#在同一个 const group 中，如果常量定义与前一行的定义一致，则可以省略类型和值。
编译时，会按照前一行的定义自动补全。


#无缓冲channel 和 有缓冲channel区别
对于无缓冲的 channel，发送方将阻塞该信道，直到接收方从该信道接收到数据为止，而接收方也将阻塞该信道，直到发送方将数据发送到该信道中为止。
对于有缓存的 channel，发送方在没有空插槽（缓冲区使用完）的情况下阻塞，而接收方在信道为空的情况下阻塞。


#runtime.NumGoroutine() 输出goruntione数量


#协程泄露(goroutine leak)
协程创建以后, 长时间得不到释放, 并在不断创建新协程, 内存耗尽
1.缺少接收器, 导致发送阻塞
2.缺少发送器, 导致接受阻塞
3.死锁, 多个goroutine竞争或通信时产生阻塞


#go 通过runtime.GOMAXPROCS 设置操作系统线程的数量
GOMAXPROCS 限制的是同时执行用户态 Go 代码的操作系统线程的数量，但是对于被系统调用阻塞的线程数量是没有限制的。
GOMAXPROCS 的默认值等于 CPU 的逻辑核数，同一时间，一个核只能绑定一个线程，然后运行被调度的协程。
因此对于 CPU 密集型的任务，若该值过大，例如设置为 CPU 逻辑核数的 2 倍，会增加线程切换的开销，降低性能。
对于 I/O 密集型应用，适当地调大该值，可以提高 I/O 吞吐率。


#golang gc垃圾回收
go1.3及之前使用标记清除
1.stw, 暂停业务逻辑, 找出可达对象, 不可达对象
2.标记对象
3.清除对象
4.恢复业务逻辑, 循环这个过程, 直到程序生命周期结束

缺点:
1.stw, 暂停程序, 程序出现卡顿, 影响性能(最严重)
2.扫描整个heap, 清除数据会产生heap碎片
3.将清除放在停止stw后面, 减少stw范围


go1.5开始使用三色标记法
1. 所有创建的对象, 标记为白色
2. gc开始, 遍历跟节点, 把得到的对象放入灰色标记表中
3. 遍历灰色标记表, 把得到的对象放入灰色标记表中, 之前的灰色对象放入黑色表中
4. 重复第三步, 直至灰色标记表为空
5. 清除白色标记表, 为垃圾

如果三色标记法不被stw保护, 当白色对象被黑色对象引用, 同时灰色对象丢失白色对象的引用
那么该白色对象将被回收. 

强三色不变式: 黑色对象不能引用白色对象, 破坏条件1
弱三色不变式: 黑色对象可以引用白色对象, 白色对象上游链路存在灰色对象, 破坏条件2

屏障机制: 
1.插入屏障(满足强三色不变式): 对象被引用时, 被标记为灰色, 针对堆对象(为了节省栈的资源, 栈空间比堆小, 插入屏障有点损耗性能)
不足: 结束时需要stw重新扫描栈, 多进行一次三色标记, 大约需要10 ~ 100 ms

2.删除屏障(满足弱三色不变式): 对象被删除时, 如果为灰色或者白色, 标记为灰色
不足: 回收精度低, 即使被删除了, 指向它的指针可以活过这一轮, 在一下轮gc中被删掉 


go1.8开始使用混合写屏障机制
混合写屏障机制:
1.gc开始栈上可达对象被标记为黑色(无需stw二次扫描)
2.gc期间, 任何栈上创建对象为黑色
3.被删除对象标记为灰色
4.被添加对象标记为灰色 
(黑色对象被删除时, 被标记为黑色, 延迟删除)