#make
代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建(build)
Makefile文件由一系列规则（rules）构成。每条规则的形式如下。
<target> : <prerequisites> 
[tab]  <commands>
上面第一行冒号前面的部分，叫做"目标"（target），冒号后面的部分叫做"前置条件"（prerequisites）；第二行必须由一个tab键起首，后面跟着"命令"（commands）。

"目标"是必需的，不可省略；"前置条件"和"命令"都是可选的，但是两者之中必须至少存在一个。

.PHONY声明伪目标

回声（echoing）
正常情况下，make会打印每条命令，然后再执行，这就叫做回声（echoing）。
@ 消除回声

模式匹配 %

Makefile 允许使用等号自定义变量,变量需要放在 $( )。
调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。

$@ 指代当前目标
$^ 指代所有前置条件

make默认执行第一条


#gcc/g++
gcc and g++分别是GNU的c & c++编译器。gcc/g++在执行编译的时候一般有下面4步：
⒈预处理，生成.i的文件[预处理器cpp]
⒉将预处理后的文件转换成汇编语言，生成文件.s[编译器egcs]
⒊由汇编变为目标代码（机器代码）生成.o的文件[汇编器as]
⒋连接目标代码，生成可执行程序[链接器ld]

编译器 g++ 通过检查命令行中指定的文件的后缀名可识别其为 C++ 源代码文件。编译器默认的动作：编译源代码文件生成对象文件(object file)，链接对象文件和 libstdc++ 库中的函数得到可执行程序。然后删除对象文件。由于命令行中未指定可执行程序的文件名，编译器采用默认的 a.out


选项 -E 使 g++ 将源代码用编译预处理器处理后不再执行其他动作
选项 -S 指示编译器将程序编译成汇编语言，输出汇编语言代码而後结束。下面的命令将由 C++ 源码文件生成汇编语言文件
选项 -c 用来告诉编译器编译源代码但不要执行链接，输出结果为对象文件。文件默认名与源码文件名相同，只是将其后缀变为 .o
选项 -o 生成指定文件名

静态库是编译器生成的一系列对象文件的集合。链接一个程序时用库中的对象文件还是目录中的对象文件都是一样的。库中的成员包括普通函数，类定义，类的对象实例等等。静态库的另一个名字叫归档文件(archive)，管理这种归档文件的工具叫 ar 
g++ -c sayhello.cpp
g++ -c say.cpp
ar -r libsay.a sayhello.o say.o
g++ saymain.cpp libsay.a -o saymain
-c理解为将头文件打包为静态库


pkg-config是向用户向程序提供相应库的路径、版本号等信息的程序
pkg-config --libs --cflags opencv


如何定位共享库文件 
a. -l(小写的l) 
用于指定程序要链接的库，-l后面紧接着（没有空格）就是库名xxxx(去掉lib和.so) 
Ps:放在默认路径（/lib ，/usr/lib ， /usr/local/lib）的库直接用-i参数就能链接，只需编译时加上 –lxxxx 就能使用libxxxx.so，程序中include libxxxx.so对应的头文件，就可以调用该库的函数。 
b. -L(大写的L) 
但是libxxxx.so没有放在默认的三个路径下时，就需要-L指定libxxxx.so的路径，否则程序就会报错（can’t find -lxxxx）。 
假设libxxxx.so所在目录为/aa/bb/cc，那么使用格式如下：-L/aa/bb/cc –lxxxx
